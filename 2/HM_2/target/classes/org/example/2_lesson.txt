--OOP, Classes etc.
4: 139 - 170
    1.Объект это экземпляр класса
    2.Class className = new Class();
    3.Собственную копию переменных
    4.MyCounter counter;
      counter = new MyCounter();
    5.public double myMeth(int a, int b) {
              return (double) a/b;
          }
    6.return;
    7.Именем класса
    8.Выделяет память для переменной или объекта
    9.Освобождает память от лишних объектов
    10.Передается ссылка на вызывающий объект.
       public int passangers;
           public int fuelcap;
           public int mpg;
           Vehicle(int p, int f, int m) {
               mpg = p;
               fuelcap = f;
               passangers = m;
           }
    11.Да, может, так же модет быть пустым
    12.добавить void
6: 219 - 264
    1.Нет, т.к. модификатор private
    2.Предшествовать
    3.Main
    4.Test
    5.Нет, если бы входные параметры были другими, то да
    6.Main - reverse()
    7.public static
    8.константа + все классы обхекта могут совместно использовать одну и ту же переменную
    9.Класс находящийся в классе, используется для предоставления услуг внешнему классу
    10.public static
    11.сигнатуру
    12.значению
    13.Main - sum()
    14.Да, можно
    15.static void vaTest(int ... v, inx x){}
7: 265 - 310
    1.Суперкласс не имеет доступа к членам подкласса, а подкласс имеет доступ к членам суперкласса, кроме private
    2.Аналог Animal and Tiger
    3.Модификатор доступа private
    4.В конструкторе подкласса
    Tiger(String n, int a, boolean veg) {
            super(n, a);
            vegan = veg;
        }
      Доступ к членам суперкласса super.memeber_class
    5.Alpha, Beta, Gamma
    6.Когда переопределяемый метод вызывается по ссылке на суперкласс , его вариант определяется по типу объекта, на который делается ссылка
    7.Класс который содержит всю базовую структуру и методы, чтобы потом успешно наследовать в другие классы
    8.модификатором final
    9.Они помогают создать обобщенную структуру, реализуемую разными классами
    10.Object
    11.Верно
    12.final
8: 311 - 348
    1.Аналог Book-BookMain-Main
    2.Область объявления, важна его возможность разделения для того предотвратить конфликт имен
    3.В каталогах
    4.Protected - значит позволяет использовать его только наследникам и в рамках пакета, доступ по умолчанию дает доступ в рамках текущего пакета
    5.public и import
    6.ООП
    7.Любое кол-во классов, класс может реализовать произвольное кол-во интерфейсов
    8.Да, может
    9.Interfaces.IVehicle
    10.Выраженная константа, которую можно вызвать через className.const
    11.Верно
    12.java.lang
    13.default
    14.Да, допускается
    15.Сделать дефолтный метод который указывает на отсутствие реализации
    16.Через interfaceName.StaticMethodName
    17.Да, и используется только в рамках этого интерфейса
